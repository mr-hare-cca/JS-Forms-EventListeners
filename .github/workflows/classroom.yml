name: Autograding

on:
  push:
  workflow_dispatch:

jobs:
  autograde:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Jest + jsdom
        run: |
          npm init -y >/dev/null 2>&1 || true
          npm install --save-dev jest@29 jsdom@21 jest-environment-jsdom@29

      - name: Jest setup shim (TextEncoder/TextDecoder)
        run: |
          cat > jest.setup.cjs <<'EOF'
          const { TextEncoder, TextDecoder } = require('util');
          if (typeof global.TextEncoder === 'undefined') global.TextEncoder = TextEncoder;
          if (typeof global.TextDecoder === 'undefined') global.TextDecoder = TextDecoder;
          EOF

      - name: Jest config
        run: |
          cat > jest.config.cjs <<'EOF'
          module.exports = {
            testEnvironment: 'jsdom',
            setupFiles: ['<rootDir>/jest.setup.cjs'],
            testMatch: ['**/__tests__/**/*.test.cjs']
          };
          EOF

      - name: Ensure tests file exists (teacher-provided)
        run: |
          mkdir -p __tests__
          if [ ! -f "__tests__/forms-8_7.test.cjs" ]; then
            echo "Missing test file: __tests__/forms-8_7.test.cjs"
            exit 1
          fi

      # ------- Individual graded checks (use -t substring, not anchored regex) -------

      - name: required elements exist
        id: t_required
        uses: classroom-resources/autograding-command-grader@v1
        with:
          test-name: required elements exist
          setup-command: echo "ready"
          command: npx jest --runInBand -t "required elements exist"
          timeout: 60
          max-score: 15

      - name: no inline onclick; uses addEventListener
        id: t_listener
        uses: classroom-resources/autograding-command-grader@v1
        with:
          test-name: no inline onclick; uses addEventListener
          setup-command: echo "ready"
          command: npx jest --runInBand -t "button uses addEventListener and no inline onclick"
          timeout: 60
          max-score: 15

      - name: large + 2 toppings dine-in = 13.50
        id: t_large
        uses: classroom-resources/autograding-command-grader@v1
        with:
          test-name: large + 2 toppings dine-in = 13.50
          setup-command: echo "ready"
          command: npx jest --runInBand -t "price large two toppings dine in"
          timeout: 60
          max-score: 20

      - name: small + delivery = 10.50
        id: t_small
        uses: classroom-resources/autograding-command-grader@v1
        with:
          test-name: small + delivery = 10.50
          setup-command: echo "ready"
          command: npx jest --runInBand -t "price small no toppings delivery"
          timeout: 60
          max-score: 20

      - name: xl + all toppings = 19.00
        id: t_xl
        uses: classroom-resources/autograding-command-grader@v1
        with:
          test-name: xl + all toppings = 19.00
          setup-command: echo "ready"
          command: npx jest --runInBand -t "price xl eight toppings dine in"
          timeout: 60
          max-score: 15

      - name: clear resets form
        id: t_clear
        uses: classroom-resources/autograding-command-grader@v1
        with:
          test-name: clear resets form
          setup-command: echo "ready"
          command: npx jest --runInBand -t "clear button resets form"
          timeout: 60
          max-score: 15

      # ------- Summary (human-readable) -------
      - name: Build human-friendly summary
        run: |
          npx jest --runInBand --json --outputFile=jest-summary.json || true
          node - <<'NODE'
          const fs = require('fs');
          let jr = {};
          try { jr = JSON.parse(fs.readFileSync('jest-summary.json','utf8')); } catch {}
          const assertions = (jr.testResults||[]).flatMap(t => t.assertionResults || []);
          const wanted = [
            'required elements exist',
            'button uses addEventListener and no inline onclick',
            'price large two toppings dine in',
            'price small no toppings delivery',
            'price xl eight toppings dine in',
            'clear button resets form'
          ];
          const status = {};
          for (const name of wanted) {
            const a = assertions.find(x => x.title === name);
            status[name] = !!a && a.status === 'passed';
          }
          const passed = Object.values(status).filter(Boolean).length;
          const lines = [];
          lines.push('Unit 8.7 Autograder Summary');
          lines.push('Passed: ' + passed + '/' + wanted.length, '');
          for (const name of wanted) lines.push((status[name] ? '✅ ' : '❌ ') + name);
          lines.push('', 'Checks');
          for (const t of assertions) lines.push(`${t.status === 'passed' ? '✅' : '❌'} ${t.title}`);
          console.log(lines.join('\n'));
          NODE

      # ------- Report points to GitHub Classroom -------
      - name: Report grades
        uses: classroom-resources/autograding-grading-reporter@v1
        with:
          runners: t_required,t_listener,t_large,t_small,t_xl,t_clear
